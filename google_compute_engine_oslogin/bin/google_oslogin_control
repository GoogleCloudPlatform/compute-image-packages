#!/bin/sh
# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

nss_config="/etc/nsswitch.conf"
pam_config="/etc/pam.d/sshd"
sshd_config="/etc/ssh/sshd_config"
sudoers_dir="/var/google-sudoers.d"
sudoers_file="/etc/sudoers.d/google-oslogin"
added_comment="# Added by Google Compute Engine OS Login."


is_freebsd() {
  [ "$(uname)" = "FreeBSD" ]
  return $?
}

modify_nsswitch_conf() {
  local nss_config="${1:-${nss_config}}"

  ${sed} -i '/^passwd:/ s/$/ cache_oslogin oslogin/' ${nss_config}
  if is_freebsd; then
    ${sed} -i '/^passwd:/ s/compat/files/' ${nss_config}
  fi
}

restore_nsswitch_conf() {
  local nss_config="${1:-${nss_config}}"

  ${sed} -i '/^passwd:/ s/ cache_oslogin oslogin//' ${nss_config}
}

modify_sshd_conf() (
  set -e

  add_or_update_sshd() {
    local entry="$1"
    local sshd_config="$2"
    local directive="$(echo "${entry}"|cut -d' ' -f1)"
    local value="$(echo "${entry}"|cut -d' ' -f2-)"
 
    # Check if directive is present .
    if grep -Eq "^\s*${directive}" "${sshd_config}"; then
      # Check if value is correct.
      if ! grep -Eq "^\s*${directive}(\s|=)+${value}" "${sshd_config}"; then
        # Amend the line.
        ${sed} -Ei \
          "/^\s*${directive}/ s/\>(\s|=)+.*/ ${value}/" "${sshd_config}"
      fi
    else
      if [ -z "${added}" ]; then
        ${sed} -i "\$a \\\n${added_comment}" "${sshd_config}"
        added="yes"
      fi
      ${sed} -i "\$a ${entry}" "${sshd_config}"
    fi
  }

  local sshd_config="${1:-${sshd_config}}"

  local sshd_auth_keys_command="AuthorizedKeysCommand /usr/bin/google_authorized_keys"
  local sshd_auth_keys_command_user="AuthorizedKeysCommandUser root"
  local sshd_auth_methods="AuthenticationMethods publickey,keyboard-interactive"
  local sshd_challenge="ChallengeResponseAuthentication yes"
  local added=""

  # Update AuthorizedKeysCommand to work on EL 6.
  if grep -qs "release 6" /etc/redhat-release; then
    sshd_user="AuthorizedKeysCommandRunAs root"
  fi

  for entry in "${sshd_auth_keys_command}" "${sshd_auth_keys_command_user}"; do
    add_or_update_sshd "${entry}" "${sshd_config}"
  done

  if [ "${two_factor}" = "true" ]; then
    for entry in "${sshd_auth_methods}" "${sshd_challenge}"; do
      add_or_update_sshd "${entry}" "${sshd_config}"
    done
  fi
)

modify_pam_sshd() (
  set -e

  local pam_config="${1:-${pam_config}}"

  local pam_auth_oslogin="auth       [success=done perm_denied=bad default=ignore] pam_oslogin_login.so"
  local pam_account_oslogin="account    [success=ok default=ignore] pam_oslogin_admin.so"
  local pam_account_admin="account    [success=ok ignore=ignore default=die] pam_oslogin_login.so"
  local pam_session_homedir="session    [success=ok default=ignore] pam_mkhomedir.so"

  local added_config=""

  # For COS simply prepend the new config.
  if [ -e /etc/os-release ] && grep -q "ID=cos" /etc/os-release; then
    added_config="${added_comment}\n"
    for cfg in "${pam_account_admin}" "${pam_account_oslogin}" \
               "${pam_session_homedir}"; do
      added_config+="${cfg}\n"
    done

    if [ -n "${two_factor}" ]; then
      added_config+="${pam_auth_oslogin}\n"
    fi

    ${sed} -i "1i ${added_config}\n\n" "${pam_config}"

    return 0
  fi

  if [ -n "${two_factor}" ]; then
    # Insert pam_auth_oslogin at top of auth stack.
    if [ -e /etc/debian_version ]; then
      # Get location of common-auth and check if preceding line is a comment.
      insert=$(${sed} -rn "/^@include\s+common-auth/=" "${pam_config}")
      ${sed} -n "$((insert-1))p" "${pam_config}" | grep -q '^#' && insert=$((insert-1))
    elif [ -e /etc/redhat-release ]; then
      # Get location of password-auth.
      insert=$(${sed} -rn "/^auth\s+(substack|include)\s+password-auth/=" "${pam_config}")
    elif [ -e /etc/SuSE-release ]; then
      # Get location of common-auth.
      insert=$(${sed} -rn "/^auth\s+include\s+common-auth/=" "${pam_config}")
    fi

    if [ -n "${insert}" ]; then
      added_config="${added_comment}\n${pam_auth_oslogin}"
      ${sed} -i "${insert}i ${added_config}" "${pam_config}"
    fi
  fi

  # Append at end of `account` stack
  added_config="\\\n${added_comment}\n${pam_account_admin}\n${pam_account_oslogin}"
  account_end=$(${sed} -n '/^account/=' "${pam_config}" | tail -1)
  ${sed} -i "${account_end}a ${added_config}" "${pam_config}"

  # Append at end of `session` stack
  added_config="\\\n${added_comment}\n${pam_session_homedir}"
  session_end=$(${sed} -n '/^session/=' "${pam_config}" | tail -1)
  ${sed} -i "${session_end}a ${added_config}" "${pam_config}"

  # TODO: SLES, FreeBSD, others?
)

restart_service() {
  local service="$1"

  # The other options will be wrappers to systemctl on
  # systemd-enabled systems, so stop if found.
  if readlink -f /sbin/init|grep -q systemd; then
    if systemctl is-active --quiet "${service}"; then
      echo "Restarting ${service}."
      systemctl restart "${service}"
      return $?
    else
      return 0
    fi
  fi

  # Use the service helper if it exists.
  if command -v service > /dev/null; then
    if service "${service}" status; then
      echo "Restarting ${service}."
      service "${service}" restart
      return $?
    else
      return 0
    fi
  fi

  # Fallback to trying sysvinit script of the same name.
  if command -v /etc/init.d/"${service}" > /dev/null; then
    if /etc/init.d/"${service}" status > /dev/null 2>&1; then
      echo "Restarting ${service}."
      /etc/init.d/"${service}" restart
      return $?
    else
      return 0
    fi
  fi

  return 0
}

restart_sshd() {
  for svc in "ssh" "sshd"; do
    restart_service "${svc}"
  done
}

restart_nscd() {
  for svc in "nscd" "unscd"; do
    restart_service "${svc}"
  done
}

setup_sudoers() {
  mkdir -p "${sudoers_dir}"
  chmod 750 "${sudoers_dir}"
  echo "#includedir ${sudoers_dir}" > "${sudoers_file}"
}

remove_sudoers() {
  rm -f "${sudoers_file}"
  rm -rf "${sudoers_dir}"
}

restore_config() {
  local config="$1"

  [ -f "${config}.pre_oslogin" ] && mv -f "${config}.pre_oslogin" "${config}"
}

restore_all_configs() {
  for config in "${sshd_config}" "${pam_config}"; do
    restore_config "${config}"
  done
}

activate() {
  for cfg in "${sshd_config}" "${pam_config}"; do
    cp "${cfg}" "${cfg}.pre_oslogin" || return 1
  done
  for func in modify_sshd_conf modify_nsswitch_conf \
              modify_pam_sshd setup_sudoers restart_nscd; do
    $func
    [ $? -eq 0 ] || return 1
  done
}

deactivate() {
  for func in remove_sudoers restore_nsswitch_conf \
              restore_all_configs restart_nscd; do
    $func
  done
}

get_status() {
  if grep -q "^passwd:.*oslogin" "${nss_config}"; then
    exit 0
  else
    exit 3
  fi
}


usage() {
  echo "Usage: $(basename "$0") {activate|deactivate|status} [--norestartsshd] [--twofactor]"
  echo "This script will activate or deactivate the features for"
  echo "Google Compute Engine OS Login."
  echo "This script must be run as root."
  exit 1
}


# Main
if [ $(id -u) -ne 0 ] || [ $# -lt 1 ]; then
  usage
fi

sed="sed"
is_freebsd && sed="gsed"

while [ $# -gt 0 ]; do
  case "$1" in
    --norestartsshd)
      no_restart_sshd="true"
      shift
      ;;
    --twofactor)
      two_factor="true"
      shift
      ;;
    activate)
      action="activate"
      shift
      ;;
    deactivate)
      action="deactivate"
      shift
      ;;
    status)
      action="status"
      shift
      ;;
    *)
      shift
      ;;
  esac
done

case "${action}" in
  activate)
    echo "Activating Google Compute Engine OS Login."
    activate
    if [ $? -ne 0 ]; then
      echo "Failed to apply changes, rolling back"
      deactivate
      exit 1
    fi
    ;;
  deactivate)
    echo "Deactivating Google Compute Engine OS Login."
    deactivate
    ;;
  status)
    get_status
    ;;
  *)
    usage
    ;;
esac

# Restart sshd unless --norestartsshd flag is set.
if [ -z "${no_restart_sshd}" ]; then
  restart_sshd
fi
