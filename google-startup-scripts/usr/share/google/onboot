#! /bin/bash
# Copyright 2013 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Prep the image for Google Compute services.
#
# Do NOT "set -e"

# Exit out early if we've run before.
declare -r RUNFILE=/var/run/google.onboot
if [ -f ${RUNFILE} ]; then
  exit 0
fi

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin

declare -r LOGFILE=/var/log/google.log

if [ -x /usr/bin/logger ]; then
    declare -r LOGGER=/usr/bin/logger
else
    declare -r LOGGER=/bin/logger
fi

declare -r BOTO_SETUP_SCRIPT=${GOOGLE_STARTUP_SCRIPTS_PREFIX}/boto/boot_setup.py

declare -r CURL_RETRY_LIMIT=10
declare -r CURL_TIMEOUT=10

declare -r STARTUP_SCRIPT=/var/run/google.startup.script

declare -r GOOGLE_ENVIRONMENT=/var/run/google.environment

declare -r CLOUDINIT_UPSTART_JOB=/etc/init/google_cloudinit.conf
declare -r CLOUDINIT_USER_DATA=/var/run/google.cloudinit.user_data
declare -r CLOUDINIT_CLOUD_BOOTHOOK=/var/lib/cloud/cloud.boothook

function log() {
  echo $* | ${LOGGER} -t google -p daemon.info
  echo $* >> ${LOGFILE}
}

function log_file() {
  cat $* | ${LOGGER} -t google -p daemon.info
  cat $* >> ${LOGFILE}
}

function download_url_with_logfile() {
  local readonly url=$1
  local readonly dest=$2
  local readonly logfile=$3

  case ${url} in
    gs://*)
      log "Downloading url from ${url} to ${dest} using gsutil";
      gsutil cp ${url} ${dest} >${logfile} 2>&1 && return 0;;
  esac

  # TODO: Many other Google Storage URLs are possible for objects.  Rather
  # than support them all here, customers should specify their object using
  # its gs://<bucket>/<object> url.
  gsutil ls >/dev/null 2>/dev/null
  if [[ $? == 0 ]]; then
    case ${url} in
      http://commondatastorage.googleapis.com/*)
        log "Downloading url from ${url} to ${dest} using gsutil";
        gsurl=gs://${url#http://commondatastorage.googleapis.com/};
        gsutil cp ${gsurl} ${dest} 2> ${logfile} && return 0;;
      https://commondatastorage.googleapis.com/*)
        log "Downloading url from ${url} to ${dest} using gsutil";
        gsurl=gs://${url#https://commondatastorage.googleapis.com/};
        gsutil cp ${gsurl} ${dest} 2> ${logfile} && return 0;;
    esac
  fi

  # Unauthenticated download of the object.
  log "Downloading url from ${url} to ${dest} using wget"
  curl --max-time "${CURL_TIMEOUT}" --retry "${CURL_RETRY_LIMIT}" \
    2> "${logfile}" -o ${dest} -- "${url}" && return 0;

  log "Failed to download $url"
  return 1
}

function download_url() {
  local readonly url=$1
  local readonly dest=$2
  local readonly logfile=$(mktemp)
  download_url_with_logfile ${url} ${dest} ${logfile}
  return_code=$?
  rm -f ${logfile}
  return ${return_code}
}

function get_metadata_value() {
  local readonly varname=$1
  ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/get_metadata_value ${varname}
  return $?
}

function get_metadata_attribute() {
  local readonly varname=$1
  ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/get_metadata_value "attributes/${varname}"
  return $?
}

function run_command_with_retry() {
  local readonly NUM_RETRY=$1
  shift
  local SLEEP=1
  for i in $(seq 1 ${NUM_RETRY}); do
    $* && return || log "retrying after ${SLEEP} sec..."
    sleep ${SLEEP}
    SLEEP=$((${SLEEP} * 2))
  done
  log failed to execute $*
  exit 1
}

function first_boot() {
  if [[ -x ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/first-boot ]]; then
    ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/first-boot
  fi
}

function virtionet_irq_affinity() {
  if [[ -x ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/virtionet-irq-affinity ]]; then
    ${GOOGLE_STARTUP_SCRIPTS_PREFIX}/virtionet-irq-affinity
  fi
}

function do_environment() {
  echo "INSTANCE_ID=$(get_metadata_value instance-id)" > ${GOOGLE_ENVIRONMENT}
}

function do_init()
{
  log "onboot initializing"

  do_environment

  # If it exists, run the boto bootstrap script.  This will set things
  # up so that gsutil will just work with any provisioned service
  # account.
  if [ -x ${BOTO_SETUP_SCRIPT} ]; then
    log "Running Boto setup script at ${BOTO_SETUP_SCRIPT}"
    ${BOTO_SETUP_SCRIPT} >> ${LOGFILE} 2>&1
  fi

  # Try to use the startup-script-url, then the startup-script metadata.
  # Check the startup script url first.
  local readonly startup_script_url=$(get_metadata_attribute startup-script-url)
  if [[ -n "${startup_script_url}" ]]; then
    download_url ${startup_script_url} ${STARTUP_SCRIPT}
    if [[ $? != 0 ]]; then
      log "Could not download startup script ${startup_script_url}"
    fi
  else
    get_metadata_attribute startup-script > ${STARTUP_SCRIPT}
    if [[ $? != 0 ]]; then
      log "No startup script found in metadata."
    fi
  fi
  [[ -e ${STARTUP_SCRIPT} ]] && chmod 700 ${STARTUP_SCRIPT}

  return 0
}

virtionet_irq_affinity
first_boot
do_init

if [ -x /sbin/initctl ]; then
  /sbin/initctl emit --no-wait google-onboot-has-run
fi

# Indicate that we've run already.
touch ${RUNFILE}
