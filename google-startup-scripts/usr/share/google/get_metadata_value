#! /bin/bash
# Copyright 2013 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Get a metadata value from the metadata server.
declare -r LOGFILE=/var/log/google.log

if [[ -x /usr/bin/logger ]]; then
    declare -r LOGGER=/usr/bin/logger
else
    declare -r LOGGER=/bin/logger
fi

declare -r VARNAME=$1
declare -r MDS_PREFIX=http://169.254.169.254/computeMetadata/v1

function log() {
  echo "$@" | ${LOGGER} -t google -p daemon.info
  echo "$@" >> ${LOGFILE}
}

function metadata_get_url_code() {
  return $(curl "${1}" -H "Metadata-Flavor: Google" -s \
      -w "%{http_code}" -o /dev/null)
}

function print_metadata_value() {
  local readonly tmpfile=$(mktemp)
  curl -f "${1}" -H "Metadata-Flavor: Google" > ${tmpfile} 2>/dev/null
  local readonly return_code=$?
  # If the command completed successfully, print the metadata value to stdout.
  if [[ ${return_code} == 0 ]]; then
    cat ${tmpfile}
  fi
  rm -f ${tmpfile}
  return ${return_code}
}

function print_metadata_value_if_exists() {
  local return_code=1
  local readonly url=$1
  metadata_get_url_code ${url}
  http_code=$?
  # Test the instance metadata value.
  if test ${http_code} -eq 200; then
    print_metadata_value ${url}
    return_code=$?
  fi
  return ${return_code}
}

function get_metadata_value() {
  local readonly varname=$1
  # Print the instance metadata value.
  print_metadata_value_if_exists ${MDS_PREFIX}/instance/${varname}
  return_code=$?
  # If the instance doesn't have the value, try the project.
  if [[ ${return_code} != 0 ]]; then
    print_metadata_value_if_exists ${MDS_PREFIX}/project/${varname}
    return_code=$?
  fi
  return ${return_code}
}

function get_metadata_value_with_retries() {
  local count=0
  local return_code=1  # General error code.

  # In cases where there is not a connection to the metadata server we are
  # assuming there is no network available and will block Google startup
  # scripts from continuing on.
  while true; do
    ((count++))
    get_metadata_value $VARNAME
    return_code=$?
    case $return_code in
      # No error.  We're done.
      0) exit ${return_code};;
      # Failed to resolve host or connect to host.  Retry indefinitely.
      6|7) sleep 1.0
        log "Waiting for metadata server, attempt ${count}"
        # After 7 minutes, add a console message denoting a probable network
        # issue. On systems using dhclient there is an attempt to obtain an IP
        # for 60 seconds followed by a 5 minute wait period. After 7 minutes,
        # this cycle will have run through twice. After this period of time, it
        # is not known when a DHCP lease might be obtained and the network
        # interface fully operational.
        if ((count >= 421)); then
          log "There is likely a problem with the network."
        fi
        continue;;
      # A genuine error.  Exit.
      *) exit ${return_code};;
    esac
  done
  # Exit with the last return code we got.
  exit ${return_code}
}

get_metadata_value_with_retries
